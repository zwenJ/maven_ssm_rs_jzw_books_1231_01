<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jzw.book.mapper.OrdersMapper">



  <resultMap id="BaseResultMap" type="com.jzw.book.model.Orders">
    <id column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="order_sum" jdbcType="INTEGER" property="orderSum" />
    <result column="order_price" jdbcType="DECIMAL" property="orderPrice" />
    <result column="order_pay_type" jdbcType="INTEGER" property="orderPayType" />
    <result column="order_date" jdbcType="TIMESTAMP" property="orderDate" />
    <result column="order_send_type" jdbcType="INTEGER" property="orderSendType" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <!-- 用户 -->
    <association property="users" javaType="com.jzw.book.model.Users">
      <id column="user_id" jdbcType="INTEGER" property="userId" />
      <result column="user_name" jdbcType="VARCHAR" property="userName" />
    </association>
    <!-- 地址 -->
    <association property="address" javaType="com.jzw.book.model.Address">
      <id column="address_id" jdbcType="INTEGER" property="addressId" />
      <result column="address_name" jdbcType="VARCHAR" property="addressName" />
      <result column="address_username" jdbcType="VARCHAR" property="addressUsername" />
      <result column="address_phone" jdbcType="VARCHAR" property="addressPhone" />
      <result column="address_code" jdbcType="VARCHAR" property="addressCode" />
    </association>
    <!-- 订单项 -->
  </resultMap>



  <!-- 订单和订单项联表 用户表-->
  <sql id="Table_A_B_C">
      b_address as B LEFT JOIN b_orders as A
      ON A.address_id = B.address_id
      LEFT JOIN b_user as C
      ON A.user_id = C.user_id
  </sql>
  <sql id="A_B_C_COLUMN">
    A.order_id, A.user_id, A.order_sum, A.order_price, A.order_pay_type, A.order_date, A.order_send_type,
    A.order_status,
    B.address_id, B.address_name, B.address_username, B.address_phone, B.address_code,
    C.user_id, C.user_name
  </sql>

  <sql id="Base_Column_List">
    order_id, user_id, order_sum, order_price, order_pay_type, order_date, order_send_type, 
    order_status, address_id
  </sql>


  <!--  订单查询 -->
  <select id="selectByPrimaryKey" parameterType="com.jzw.book.util.PageBean" resultMap="BaseResultMap">
    select 
    <include refid="A_B_C_COLUMN" />
    from <include refid="Table_A_B_C" />
    where
    <!-- 查询相关状态的订单 -->
    A.order_status = #{status, jdbcType=INTEGER}
    <trim prefix="and" suffixOverrides="and">
      <!-- 根据用户查询全部的订单 -->
      <if test="bookType != null and bookType !=0 ">
        C.user_id = #{bookType, jdbcType=INTEGER} AND
      </if>
      <!-- 根据收货人模糊查询 -->
      <if test="likeText != null and likeText != ''">
        B.address_username LIKE '%${likeText}%'
      </if>
    </trim>
    <!-- 按时间倒序 -->
    ORDER BY A.order_date DESC
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">

    delete from b_orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>


  <!-- 保存订单 -->
  <insert id="insert" parameterType="com.jzw.book.model.Orders"
          keyColumn="order_id" keyProperty="orderId" useGeneratedKeys="true">
    insert into b_orders (user_id, order_sum,
      order_price, order_pay_type, order_date, 
      order_send_type, order_status, address_id)
    values (#{userId,jdbcType=INTEGER}, #{orderSum,jdbcType=INTEGER},
      #{orderPrice,jdbcType=DECIMAL}, #{orderPayType,jdbcType=INTEGER},
      #{orderDate,jdbcType=TIMESTAMP}, #{orderSendType,jdbcType=INTEGER},
      #{orderStatus,jdbcType=INTEGER}, #{address.addressId, jdbcType=INTEGER})
  </insert>



  <insert id="insertSelective" parameterType="com.jzw.book.model.Orders">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sun Dec 31 13:41:06 CST 2017.
    -->
    insert into b_orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="orderSum != null">
        order_sum,
      </if>
      <if test="orderPrice != null">
        order_price,
      </if>
      <if test="orderPayType != null">
        order_pay_type,
      </if>
      <if test="orderDate != null">
        order_date,
      </if>
      <if test="orderSendType != null">
        order_send_type,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="orderSum != null">
        #{orderSum,jdbcType=INTEGER},
      </if>
      <if test="orderPrice != null">
        #{orderPrice,jdbcType=DECIMAL},
      </if>
      <if test="orderPayType != null">
        #{orderPayType,jdbcType=INTEGER},
      </if>
      <if test="orderDate != null">
        #{orderDate,jdbcType=TIMESTAMP},
      </if>
      <if test="orderSendType != null">
        #{orderSendType,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>



  <update id="updateByPrimaryKeySelective" parameterType="com.jzw.book.model.Orders">
    update b_orders
    <set>
      <if test="orderPayType != null">
        order_pay_type = #{orderPayType,jdbcType=INTEGER},
      </if>
      <if test="orderSendType != null">
        order_send_type = #{orderSendType,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>



  <update id="updateByPrimaryKey" parameterType="com.jzw.book.model.Orders">
    update b_orders
    set user_id = #{userId,jdbcType=INTEGER},
      order_sum = #{orderSum,jdbcType=INTEGER},
      order_price = #{orderPrice,jdbcType=DECIMAL},
      order_pay_type = #{orderPayType,jdbcType=INTEGER},
      order_date = #{orderDate,jdbcType=TIMESTAMP},
      order_send_type = #{orderSendType,jdbcType=INTEGER},
      order_status = #{orderStatus,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>




</mapper>